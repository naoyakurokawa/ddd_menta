// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_useruc is a generated GoMock package.
package mock_useruc

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	userdm "github.com/naoyakurokawa/ddd_menta/core/domain/userdm"
)

// MockUserUsecase is a mock of UserUsecase interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserUsecase) Create(name, email, password, profile string) (*userdm.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, email, password, profile)
	ret0, _ := ret[0].(*userdm.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserUsecaseMockRecorder) Create(name, email, password, profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserUsecase)(nil).Create), name, email, password, profile)
}
