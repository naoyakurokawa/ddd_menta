// Code generated by MockGen. DO NOT EDIT.
// Source: personal_contract_repository.go

// Package mock_personalcontractdm is a generated GoMock package.
package mock_personalcontractdm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	personalcontractdm "github.com/naoyakurokawa/ddd_menta/core/domain/personalcontractdm"
)

// MockPersonalContractRepository is a mock of PersonalContractRepository interface.
type MockPersonalContractRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPersonalContractRepositoryMockRecorder
}

// MockPersonalContractRepositoryMockRecorder is the mock recorder for MockPersonalContractRepository.
type MockPersonalContractRepositoryMockRecorder struct {
	mock *MockPersonalContractRepository
}

// NewMockPersonalContractRepository creates a new mock instance.
func NewMockPersonalContractRepository(ctrl *gomock.Controller) *MockPersonalContractRepository {
	mock := &MockPersonalContractRepository{ctrl: ctrl}
	mock.recorder = &MockPersonalContractRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPersonalContractRepository) EXPECT() *MockPersonalContractRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPersonalContractRepository) Create(personalContract *personalcontractdm.PersonalContract) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", personalContract)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPersonalContractRepositoryMockRecorder) Create(personalContract interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPersonalContractRepository)(nil).Create), personalContract)
}

// FetchByID mocks base method.
func (m *MockPersonalContractRepository) FetchByID(personalContractID personalcontractdm.PersonalContractID) (*personalcontractdm.PersonalContract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByID", personalContractID)
	ret0, _ := ret[0].(*personalcontractdm.PersonalContract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByID indicates an expected call of FetchByID.
func (mr *MockPersonalContractRepositoryMockRecorder) FetchByID(personalContractID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByID", reflect.TypeOf((*MockPersonalContractRepository)(nil).FetchByID), personalContractID)
}
